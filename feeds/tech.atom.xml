<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom"><title>Tegar &amp; Words - Tech</title><link href="https://tegarimansyah.github.io/" rel="alternate"></link><link href="https://tegarimansyah.github.io/feeds/tech.atom.xml" rel="self"></link><id>https://tegarimansyah.github.io/</id><updated>2020-02-05T05:55:00+07:00</updated><subtitle>Technology, Lifestyle, Idea. Simply Written</subtitle><entry><title>Simple CLI For Forecast Our Financial</title><link href="https://tegarimansyah.github.io/simple-cli-for-forecast-our-financial.html" rel="alternate"></link><published>2020-02-05T05:55:00+07:00</published><updated>2020-02-05T05:55:00+07:00</updated><author><name>tegarimansyah</name></author><id>tag:tegarimansyah.github.io,2020-02-05:/simple-cli-for-forecast-our-financial.html</id><summary type="html">&lt;p&gt;I have so many items in my shopping list, but I worry to spend too much. What if I don't have enough money in two months? So I just create a simple golang program to forecast it ...&lt;/p&gt;</summary><content type="html">&lt;p&gt;wasd&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="kd"&gt;func&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;r&lt;/span&gt; &lt;span class="o"&gt;*&lt;/span&gt;&lt;span class="nx"&gt;receiver&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="nx"&gt;nama&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="nx"&gt;Error&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="nx"&gt;test&lt;/span&gt; &lt;span class="o"&gt;:=&lt;/span&gt; &lt;span class="nx"&gt;r&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;Nama&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;</content><category term="Projects"></category></entry><entry><title>From Zero to Production Web App with Makefile</title><link href="https://tegarimansyah.github.io/from-zero-to-production-web-app-with-makefile.html" rel="alternate"></link><published>2020-01-10T00:00:00+07:00</published><updated>2020-01-10T00:00:00+07:00</updated><author><name>tegarimansyah</name></author><id>tag:tegarimansyah.github.io,2020-01-10:/from-zero-to-production-web-app-with-makefile.html</id><summary type="html">&lt;p&gt;I got free credit from AWS and create some EC2, one of them is for my mini projects in https://urusan.id. Set up a server for so many projects is an activity that does the same thing over and over again. So, automation will come to play ...&lt;/p&gt;</summary><content type="html">&lt;p&gt;I got free credit from AWS and create some EC2, one of them is for my mini projects in https://urusan.id. Set up a server for so many projects is an activity that does the same thing over and over again. So, automation will come to play. &lt;/p&gt;
&lt;p&gt;I already set up my main domain in cloudflare. Every new project will get subdomain. I also already setup server using &lt;a href="http://dokku.viewdocs.io/dokku/"&gt;dokku&lt;/a&gt; (PaaS like heroku). Let's see how I make a new project in a manual way:&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;Search idea and name&lt;/li&gt;
&lt;li&gt;Write some code&lt;/li&gt;
&lt;li&gt;Create new dokku app&lt;/li&gt;
&lt;li&gt;Git init and push to dokku&lt;/li&gt;
&lt;li&gt;Add domain to dokku app&lt;/li&gt;
&lt;li&gt;Register domain in cloudflare&lt;/li&gt;
&lt;li&gt;Add SSL from cloudflare to dokku app&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;The first step obviously will be manual, it is human's job. The second step, we can use boilerplate code to initialize. The rest, I will use &lt;code&gt;make&lt;/code&gt; command to do it automatically. Why not using &lt;code&gt;bash script&lt;/code&gt;? Well, makefile simplifies how we define every step in target. In bash script, we need to define every target in parameter, and if in any case an error occurred, we can't just jump to specific step easily. So let see how it works &lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="nf"&gt;.PHONY&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt; &lt;span class="n"&gt;help&lt;/span&gt;

&lt;span class="nf"&gt;help&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt; &lt;span class="c"&gt;## make project project_name=pendidikan domain=pendidikan.urusan.id&lt;/span&gt;
    @grep -E &lt;span class="s1"&gt;&amp;#39;^[a-zA-Z_-]+:.*?## .*$$&amp;#39;&lt;/span&gt; &lt;span class="k"&gt;$(&lt;/span&gt;MAKEFILE_LIST&lt;span class="k"&gt;)&lt;/span&gt; &lt;span class="p"&gt;|&lt;/span&gt; sort &lt;span class="p"&gt;|&lt;/span&gt; awk &lt;span class="s1"&gt;&amp;#39;BEGIN {FS = &amp;quot;:.*?## &amp;quot;}; {printf &amp;quot;\033[36m%-30s\033[0m %s\n&amp;quot;, $$1, $$2}&amp;#39;&lt;/span&gt;

&lt;span class="nv"&gt;DOKKU_SERVER&lt;/span&gt;    &lt;span class="o"&gt;:=&lt;/span&gt; SERVER_IP_ADDRESS

&lt;span class="nf"&gt;create-dokku-project&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt; &lt;span class="c"&gt;## Create new dokku apps on server&lt;/span&gt;
    ssh -i server_key.pem dokku@&lt;span class="k"&gt;$(&lt;/span&gt;DOKKU_SERVER&lt;span class="k"&gt;)&lt;/span&gt; apps:create &lt;span class="k"&gt;$(&lt;/span&gt;project_name&lt;span class="k"&gt;)&lt;/span&gt;
    ssh -i server_key.pem dokku@&lt;span class="k"&gt;$(&lt;/span&gt;DOKKU_SERVER&lt;span class="k"&gt;)&lt;/span&gt; buildpacks:add &lt;span class="k"&gt;$(&lt;/span&gt;project_name&lt;span class="k"&gt;)&lt;/span&gt; https://github.com/heroku/heroku-buildpack-python.git&lt;span class="se"&gt;\#&lt;/span&gt;remove-sqlite

&lt;span class="nf"&gt;create-new-project&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt; &lt;span class="c"&gt;## Create local project&lt;/span&gt;
    cp -R boilerplate ../&lt;span class="k"&gt;$(&lt;/span&gt;project_name&lt;span class="k"&gt;)&lt;/span&gt;
    &lt;span class="nb"&gt;cd&lt;/span&gt; ../&lt;span class="k"&gt;$(&lt;/span&gt;project_name&lt;span class="k"&gt;)&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt; git init
    &lt;span class="nb"&gt;cd&lt;/span&gt; ../&lt;span class="k"&gt;$(&lt;/span&gt;project_name&lt;span class="k"&gt;)&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt; git remote add dokku dokku@&lt;span class="k"&gt;$(&lt;/span&gt;DOKKU_SERVER&lt;span class="k"&gt;)&lt;/span&gt;:&lt;span class="k"&gt;$(&lt;/span&gt;project_name&lt;span class="k"&gt;)&lt;/span&gt;
    &lt;span class="nb"&gt;cd&lt;/span&gt; ../&lt;span class="k"&gt;$(&lt;/span&gt;project_name&lt;span class="k"&gt;)&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt; git add .
    &lt;span class="nb"&gt;cd&lt;/span&gt; ../&lt;span class="k"&gt;$(&lt;/span&gt;project_name&lt;span class="k"&gt;)&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt; git commit -m &lt;span class="s2"&gt;&amp;quot;initial commit&amp;quot;&lt;/span&gt;

&lt;span class="nf"&gt;push-new-project&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt; &lt;span class="n"&gt;create&lt;/span&gt;-&lt;span class="n"&gt;new&lt;/span&gt;-&lt;span class="n"&gt;project&lt;/span&gt; &lt;span class="c"&gt;## Push new project to test if it works&lt;/span&gt;
    &lt;span class="nb"&gt;cd&lt;/span&gt; ../&lt;span class="k"&gt;$(&lt;/span&gt;project_name&lt;span class="k"&gt;)&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt; git push dokku master

&lt;span class="nf"&gt;add-domain&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt; &lt;span class="c"&gt;## add domain&lt;/span&gt;
    ssh -i server_key.pem dokku@&lt;span class="k"&gt;$(&lt;/span&gt;DOKKU_SERVER&lt;span class="k"&gt;)&lt;/span&gt; domains:add &lt;span class="k"&gt;$(&lt;/span&gt;project_name&lt;span class="k"&gt;)&lt;/span&gt; &lt;span class="k"&gt;$(&lt;/span&gt;domain&lt;span class="k"&gt;)&lt;/span&gt;
    curl -X POST &lt;span class="s2"&gt;&amp;quot;https://api.cloudflare.com/client/v4/zones/ZONE_ID/dns_records&amp;quot;&lt;/span&gt; &lt;span class="se"&gt;\&lt;/span&gt;
     -H &lt;span class="s2"&gt;&amp;quot;Authorization: Bearer TOKEN_CLOUDFLARE&amp;quot;&lt;/span&gt; &lt;span class="se"&gt;\&lt;/span&gt;
     -H &lt;span class="s2"&gt;&amp;quot;Content-Type: application/json&amp;quot;&lt;/span&gt; &lt;span class="se"&gt;\&lt;/span&gt;
     --data &lt;span class="s1"&gt;&amp;#39;{&amp;quot;type&amp;quot;:&amp;quot;CNAME&amp;quot;,&amp;quot;name&amp;quot;:&amp;quot;&amp;#39;&lt;/span&gt;&lt;span class="k"&gt;$(&lt;/span&gt;domain&lt;span class="k"&gt;)&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;&amp;quot;,&amp;quot;content&amp;quot;:&amp;quot;urusan.id&amp;quot;,&amp;quot;ttl&amp;quot;:1,&amp;quot;proxied&amp;quot;:true}&amp;#39;&lt;/span&gt;

&lt;span class="nf"&gt;ssl&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt; &lt;span class="c"&gt;## add ssl for this domain&lt;/span&gt;
&lt;span class="c"&gt;    # Only works for domain and subdomain&lt;/span&gt;
&lt;span class="c"&gt;    # Sub-subdomain will not work&lt;/span&gt;
    ssh -i server_key.pem ubuntu@&lt;span class="k"&gt;$(&lt;/span&gt;DOKKU_SERVER&lt;span class="k"&gt;)&lt;/span&gt; sh dokku_give_ssl.sh &lt;span class="k"&gt;$(&lt;/span&gt;project_name&lt;span class="k"&gt;)&lt;/span&gt;

&lt;span class="nf"&gt;project&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt; &lt;span class="n"&gt;create&lt;/span&gt;-&lt;span class="n"&gt;dokku&lt;/span&gt;-&lt;span class="n"&gt;project&lt;/span&gt; &lt;span class="n"&gt;push&lt;/span&gt;-&lt;span class="n"&gt;new&lt;/span&gt;-&lt;span class="n"&gt;project&lt;/span&gt; &lt;span class="n"&gt;add&lt;/span&gt;-&lt;span class="n"&gt;domain&lt;/span&gt; &lt;span class="n"&gt;ssl&lt;/span&gt; &lt;span class="c"&gt;## Create ready-to-use new project&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;It only takes less than 5 minutes to create a live project with SSL. Actually, I also create one like this at Alterra, but with more features: User management, github or gitlab integration, multiple CI integration, private Docker registry and deploy to kubernetes. If we see some repetition in a process, then there is a possibility to implement automation.&lt;/p&gt;</content><category term="Projects"></category></entry><entry><title>CI/CD for Python Conference Indonesia Website</title><link href="https://tegarimansyah.github.io/ci-cd-for-python-conference-indonesia-website.html" rel="alternate"></link><published>2019-11-20T00:00:00+07:00</published><updated>2019-11-20T00:00:00+07:00</updated><author><name>tegarimansyah</name></author><id>tag:tegarimansyah.github.io,2019-11-20:/ci-cd-for-python-conference-indonesia-website.html</id><summary type="html">&lt;p&gt;Usually when we organize an event, we need a website and assign several people to take care of it. At PyCon, I believe in collaboration, so I made the PyCon ID 2019 website become Open Source ...&lt;/p&gt;</summary><content type="html">&lt;p&gt;Usually when we organize an event, we need a website and assign several people to take care of it. At PyCon, I believe in collaboration, so I made the PyCon ID 2019 website become Open Source. Let's see on &lt;a href="https://github.com/pyconid/pyconid2019"&gt;github&lt;/a&gt; for the source code and pycon.id for live website.&lt;/p&gt;
&lt;p&gt;I will save how I manage the projects for another post, here we talk about the tech stack and CI/CD. The pycon.id built with &lt;a href="https://github.com/getpelican/pelican"&gt;pelican&lt;/a&gt; - static site generator, so there are two components here: theme and content. Because the generated website are static site (html + css + js only), we utilize free hosting from &lt;a href="https://pages.github.com/"&gt;github pages&lt;/a&gt; and deploy it using free CI service from &lt;a href="https://travis-ci.org"&gt;travis-ci&lt;/a&gt; for open source. &lt;/p&gt;
&lt;p&gt;After we &lt;a href="https://travis-ci.org/account/repositories"&gt;enable our repo&lt;/a&gt; in travis "watch list", then every time we push to our remote repo travis will do something. What to do? It depends how you define it in &lt;code&gt;.travis.yml&lt;/code&gt;. For example, this is &lt;a href="https://github.com/pyconid/pyconid2019/blob/master/.travis.yml"&gt;our code&lt;/a&gt;:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="nt"&gt;language&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="l l-Scalar l-Scalar-Plain"&gt;python&lt;/span&gt;
&lt;span class="nt"&gt;dist&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="l l-Scalar l-Scalar-Plain"&gt;trusty&lt;/span&gt;

&lt;span class="nt"&gt;python&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
&lt;span class="p p-Indicator"&gt;-&lt;/span&gt; &lt;span class="s"&gt;&amp;#39;3.5&amp;#39;&lt;/span&gt;

&lt;span class="nt"&gt;before_install&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
&lt;span class="p p-Indicator"&gt;-&lt;/span&gt; &lt;span class="l l-Scalar l-Scalar-Plain"&gt;pip install -U pip&lt;/span&gt;
&lt;span class="p p-Indicator"&gt;-&lt;/span&gt; &lt;span class="l l-Scalar l-Scalar-Plain"&gt;pip install -U setuptools&lt;/span&gt;
&lt;span class="p p-Indicator"&gt;-&lt;/span&gt; &lt;span class="l l-Scalar l-Scalar-Plain"&gt;pip install -r requirements.txt&lt;/span&gt;

&lt;span class="nt"&gt;script&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
&lt;span class="p p-Indicator"&gt;-&lt;/span&gt; &lt;span class="l l-Scalar l-Scalar-Plain"&gt;make html&lt;/span&gt;

&lt;span class="nt"&gt;after_success&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
&lt;span class="p p-Indicator"&gt;-&lt;/span&gt; &lt;span class="l l-Scalar l-Scalar-Plain"&gt;rm -rf .git/&lt;/span&gt;
&lt;span class="p p-Indicator"&gt;-&lt;/span&gt; &lt;span class="l l-Scalar l-Scalar-Plain"&gt;git init&lt;/span&gt;
&lt;span class="p p-Indicator"&gt;-&lt;/span&gt; &lt;span class="l l-Scalar l-Scalar-Plain"&gt;git config user.name &amp;quot;PyconID&amp;quot;&lt;/span&gt;
&lt;span class="p p-Indicator"&gt;-&lt;/span&gt; &lt;span class="l l-Scalar l-Scalar-Plain"&gt;git config user.email &amp;quot;pyconid@pycon.id&amp;quot;&lt;/span&gt;
&lt;span class="p p-Indicator"&gt;-&lt;/span&gt; &lt;span class="l l-Scalar l-Scalar-Plain"&gt;git config --global push.default simple&lt;/span&gt;
&lt;span class="p p-Indicator"&gt;-&lt;/span&gt; &lt;span class="l l-Scalar l-Scalar-Plain"&gt;git remote add origin https://$GITHUB_TOKEN@github.com/pyconid/pyconid2019&lt;/span&gt;
&lt;span class="p p-Indicator"&gt;-&lt;/span&gt; &lt;span class="l l-Scalar l-Scalar-Plain"&gt;make github&lt;/span&gt;

&lt;span class="nt"&gt;branches&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
  &lt;span class="nt"&gt;only&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
  &lt;span class="p p-Indicator"&gt;-&lt;/span&gt; &lt;span class="l l-Scalar l-Scalar-Plain"&gt;master&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;We are using gitflow for this project. Everyone that want to contribute must fork the repo and add a pull request. We will evaluate the code, merge to master and let travis do the deployment.&lt;/p&gt;
&lt;p&gt;Pelican is python base module, so we use python language as base for the CI. We simply install all dependency and make generated html. If no error occured, we push our newly created html in our &lt;code&gt;gh-pages&lt;/code&gt; branch using &lt;code&gt;make github&lt;/code&gt; command. &lt;/p&gt;
&lt;p&gt;It's fun to see how this simple approach, with limited number of Pycon committees, we can invite several people to contribute both in making themes, making words and so on. As a core committee, I and the team will focus more on planning, evaluating and merging to master. I will apply this concept to the next community conference, interested in contributing?&lt;/p&gt;</content><category term="Projects"></category></entry><entry><title>IoT Architecture</title><link href="https://tegarimansyah.github.io/iot-architecture.html" rel="alternate"></link><published>2019-11-20T00:00:00+07:00</published><updated>2019-11-20T00:00:00+07:00</updated><author><name>tegarimansyah</name></author><id>tag:tegarimansyah.github.io,2019-11-20:/iot-architecture.html</id><summary type="html">&lt;p&gt;I have so many items in my shopping list, but I worry to spend too much. What if I don't have enough money in two months? So I just create a simple golang program to forecast it ...&lt;/p&gt;</summary><content type="html">&lt;p&gt;wasd&lt;/p&gt;</content><category term="Projects"></category></entry></feed>